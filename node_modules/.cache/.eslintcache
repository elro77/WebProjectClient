[{"C:\\Web_Project\\client\\src\\index.js":"1","C:\\Web_Project\\client\\src\\App.js":"2","C:\\Web_Project\\client\\src\\components\\LogIn.js":"3","C:\\Web_Project\\client\\src\\components\\Register.js":"4","C:\\Web_Project\\client\\src\\components\\Navigator.js":"5","C:\\Web_Project\\client\\src\\components\\Home.js":"6","C:\\Web_Project\\client\\src\\services\\serverCom.js":"7","C:\\Web_Project\\client\\src\\components\\ProjectWindow.js":"8","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\index.js":"9","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\App.js":"10","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\LogIn.js":"11","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\Register.js":"12","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\Navigator.js":"13","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\Home.js":"14","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\ProjectWindow.js":"15","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\services\\serverCom.js":"16"},{"size":133,"mtime":1650270629830,"results":"17","hashOfConfig":"18"},{"size":1915,"mtime":1654945125367,"results":"19","hashOfConfig":"18"},{"size":3075,"mtime":1654944875467,"results":"20","hashOfConfig":"18"},{"size":3807,"mtime":1654944589111,"results":"21","hashOfConfig":"18"},{"size":1254,"mtime":1654944907909,"results":"22","hashOfConfig":"18"},{"size":6332,"mtime":1654944845951,"results":"23","hashOfConfig":"18"},{"size":6334,"mtime":1654943095680,"results":"24","hashOfConfig":"18"},{"size":22908,"mtime":1654945239261,"results":"25","hashOfConfig":"18"},{"size":133,"mtime":1655409441624,"results":"26","hashOfConfig":"27"},{"size":1915,"mtime":1655409441619,"results":"28","hashOfConfig":"27"},{"size":3075,"mtime":1655409441621,"results":"29","hashOfConfig":"27"},{"size":3807,"mtime":1655409441624,"results":"30","hashOfConfig":"27"},{"size":1254,"mtime":1655409441622,"results":"31","hashOfConfig":"27"},{"size":6332,"mtime":1655409441620,"results":"32","hashOfConfig":"27"},{"size":22908,"mtime":1655409441623,"results":"33","hashOfConfig":"27"},{"size":6334,"mtime":1655409441625,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"lkk28s",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"p0zski",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Web_Project\\client\\src\\index.js",[],["71","72"],"C:\\Web_Project\\client\\src\\App.js",[],"C:\\Web_Project\\client\\src\\components\\LogIn.js",[],"C:\\Web_Project\\client\\src\\components\\Register.js",[],"C:\\Web_Project\\client\\src\\components\\Navigator.js",["73"],"import {  Navbar, Nav,NavDropdown } from 'react-bootstrap'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState } from 'react';\r\nexport let SetUser\r\nlet history = null\r\nconst Navigator = () => {\r\n  let History = useHistory()\r\n    history= History\r\n    // ...\r\n    const [user, setUser] = useState({name:\"guest\",isLog:false});\r\n    \r\n    SetUser=setUser\r\n    let dropDown=null;\r\n    let navHome = null;\r\n    function logOut(){\r\n      setUser({name:\"guest\",isLog:false})\r\n      History.replace(\"/LogIn\") \r\n       \r\n    }\r\n    if (user.isLog){\r\n      dropDown=<NavDropdown title={user.name} id=\"basic-nav-dropdown\">\r\n         <NavDropdown.Item onClick={logOut}>Logout</NavDropdown.Item>\r\n      </NavDropdown>\r\n      navHome = <Nav.Link onClick={()=>{History.replace(\"/Home\")}}>Home</Nav.Link>\r\n    }\r\n     \r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">  \r\n          <Navbar.Brand>Working on it!</Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n            {navHome}\r\n            {dropDown}\r\n            </Nav>\r\n            \r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n    )}\r\nexport default Navigator\r\n","C:\\Web_Project\\client\\src\\components\\Home.js",["74"],"import { Card, Form, Button, Container, Row, Col, Modal } from 'react-bootstrap'\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nconst sc=require(\"../services/serverCom.js\");\r\n\r\nvar history=null\r\n\r\nconst Home = ({ userName, userProjects, setProjectJson}) => {\r\n    let History = useHistory()\r\n    history=History\r\n\r\n\r\n\r\n  \r\n    const [formValidated, setFormValidated] = useState(false);\r\n    const [m_userName, setUserName] = useState(userName)\r\n    const [show, setShow] = useState(false);\r\n\r\n    var projectToJson =[]\r\n    if(userProjects.length !== 0)\r\n        projectToJson = JSON.parse(userProjects)\r\n\r\n    const [projectsList, setProjcetList] = useState(projectToJson);\r\n\r\n    const goToProject =(projectID) =>{\r\n\r\n        console.log(\"open clicked\")\r\n        // setProjectJson = projectsList[projectIndex]\r\n        console.log(projectID)\r\n        for(var i = 0; i<projectsList.length; i++)\r\n        {\r\n            if(projectsList[i]._id === projectID)\r\n            {\r\n                console.log(projectsList[i])\r\n                setProjectJson(projectsList[i])\r\n                break\r\n            }      \r\n        }\r\n        \r\n        history.push(\"/ProjectWindow\")\r\n\r\n\r\n    }\r\n\r\n\r\n    const onAddProjectSuccess = (projectJson) =>{\r\n        console.log(\"Home2 onAddProjectSuccess\") \r\n        console.log(projectJson)\r\n        console.log(typeof projectJson)\r\n        var projectToJson = JSON.parse(projectJson)\r\n        //add project to projects list\r\n        const newList = [...projectsList, projectToJson];\r\n        // console.log(newList);\r\n        setProjcetList(newList);\r\n        // console.log(projectsList);\r\n    }\r\n\r\n    const onAddProjectFailed = () =>{\r\n        //Notify User\r\n        console.log(\"project failed to add\")\r\n        alert('such project already exists!');\r\n    }\r\n\r\n    const handleClose = () => \r\n    {\r\n        setFormValidated(false);\r\n        setShow(false);\r\n    }\r\n    const handleShow = () => setShow(true);\r\n\r\n    const addProject = () => \r\n    {\r\n        handleShow();\r\n    }\r\n\r\n    const addProjectToDB = (user,projectName, projectDesc) =>{\r\n        console.log(\"addProjectToDB\")\r\n        sc.addProject(user,projectName,projectDesc,projectsList, onAddProjectSuccess, onAddProjectFailed);\r\n    }\r\n\r\n    const submitProject = (event)=>\r\n    {\r\n   \r\n        event.preventDefault();\r\n        const form = event.currentTarget\r\n        const projectName = form.projectName.value\r\n        const projectDesc = form.projectDescription.value\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setFormValidated(true);\r\n        }\r\n   \r\n        else\r\n        {     \r\n            handleClose();\r\n\r\n\r\n            addProjectToDB(userName,projectName, projectDesc)\r\n\r\n            //add project to dataBase\r\n            \r\n\r\n        }\r\n\r\n  \r\n    }\r\n    //read projcets of user\r\n    return (    \r\n        <div >\r\n        <div className=\"home\" >\r\n            <div className=\"labelStyle\" >Hello, {m_userName}</div>\r\n        </div>\r\n        <div className=\"center\">\r\n            <div>\r\n                <div id=\"projectName\" className=\"labelStyle\">My Projects</div>\r\n                <Button variant=\"outline-success\" onClick={addProject} >Add Project</Button>\r\n                <hr></hr>\r\n                \r\n            </div>\r\n\r\n            {/* Projcets Grid*/}\r\n            <Container className='ProjctsGrid'>  \r\n                {projectsList.map(({ _id,projectName, creator, projectDesc, time}) => (\r\n                    <Row key = {\"row\" + {_id}}>\r\n                    <Col key = {\"col\" + {_id}}>\r\n                        <Card key = {_id}>\r\n                            <Card.Header>Owner: {creator}</Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Title style={{fontSize:26}}>{projectName}</Card.Title>\r\n                                <Card.Subtitle className=\"mb-2 text-muted\" style={{fontSize:14}} >Created in: {time}</Card.Subtitle>\r\n                                <Card.Text style={{fontSize:20}}>\r\n                                {projectDesc}\r\n                                </Card.Text>\r\n                                <Button variant=\"primary\" onClick={() => goToProject(_id)}>Open</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    </Row> \r\n                ))}    \r\n            </Container>\r\n\r\n\r\n            {/* Adding Projcet Form*/}\r\n            <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered show={show} onHide={handleClose}>\r\n                <Form noValidate validated={formValidated} onSubmit={submitProject}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Project</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        {/* ProjectName */}\r\n                        <Form.Group controlId=\"projectName\">\r\n                            <Form.Label>Projcet Name</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder={\"Insert Name\"} />\r\n                            <Form.Control.Feedback type=\"valid\"></Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter a projet name.\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        {/* Description */}\r\n                        <Form.Group controlId=\"projectDescription\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={3} placeholder=\"Description\" />   \r\n                        </Form.Group>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\" >\r\n                            Add\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            \r\n        </div>\r\n        </div>     \r\n    )}\r\nexport default Home","C:\\Web_Project\\client\\src\\services\\serverCom.js",[],"C:\\Web_Project\\client\\src\\components\\ProjectWindow.js",["75","76","77","78","79","80","81","82"],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\index.js",[],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\App.js",[],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\LogIn.js",[],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\Register.js",[],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\Navigator.js",["83"],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\Home.js",["84"],"C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\components\\ProjectWindow.js",["85","86","87","88","89","90","91","92"],"import { Table, Form, Button, Tab, Tabs,  Modal ,Dropdown,Toast} from 'react-bootstrap'\r\nimport React, { useState} from 'react';\r\nimport { useHistory} from \"react-router-dom\";\r\n\r\n\r\nconst sc=require(\"../services/serverCom.js\");\r\n\r\n\r\nconst ProjectWindow = ({userName, projectJson}) => {\r\n    var adminFound = false\r\n    var showToast = false\r\n    var showoverdueToast = false\r\n  \r\n    let currentDate = Date.parse(new Date().toISOString().split('T')[0])\r\n    var issuesJSON =[]\r\n    if(projectJson.issues.length !== 0)\r\n    {\r\n        for (var index in projectJson.issues)\r\n        {\r\n            var selectedDate = Date.parse(projectJson.issues[index].date)\r\n\r\n            if(selectedDate < currentDate && projectJson.issues[index].status === \"active\")\r\n                 showoverdueToast=true\r\n\r\n  \r\n            if((projectJson.issues[index].status === \"waiting\") && (projectJson.issues[index].assignedBy===userName))\r\n                    showToast = true\r\n            issuesJSON.push(projectJson.issues[index])\r\n        }\r\n    }\r\n    \r\n    \r\n    //component members\r\n    const [m_issuesList, setIssuesList] = useState(issuesJSON);\r\n    const [m_adminList, setAdminList] = useState(projectJson.admin);\r\n    const [m_memberList, setMemberList] = useState(projectJson.members);\r\n    const [m_currentIssueID, setCurrentIssueID] = useState(projectJson.issues.length)\r\n\r\n    const [m_showPendingToast, setShowPendingToast] = useState(showToast)\r\n    const [m_showOverdueToast, setShowOverdueToast] = useState(showoverdueToast)\r\n    \r\n\r\n\r\n    \r\n\r\n\r\n    //component global params\r\n    const [formValidated, setFormValidated] = useState(false);\r\n    const [showAddIssue, setAddIssue] = useState(false);\r\n    const [showAddMember, setAddMember] = useState(false);\r\n    const [newMemberPremission, setPremmisoin] = useState(\"Member\");\r\n    const [issueDateValid, setIssueDateValid] = useState(false);\r\n    const [issueDateInValid, setIssueDateInValid] = useState(false);\r\n\r\n    \r\n    \r\n    //init\r\n    for (var index in projectJson.admin)\r\n    {\r\n        if(projectJson.admin[index] === userName)\r\n        {\r\n            adminFound = true\r\n            break;\r\n        }\r\n    }\r\n\r\n    let itemsList = []\r\n    for (var index in projectJson.admin)\r\n    {\r\n        itemsList.push(projectJson.admin[index])\r\n    }\r\n\r\n    for (var index in projectJson.members)\r\n    {\r\n        itemsList.push(projectJson.members[index])\r\n    }\r\n    \r\n\r\n    \r\n    const [isAdmin, setIsAdmin] = useState(adminFound);\r\n\r\n    const [dropDownItems, setDropDownItems] = useState(itemsList)\r\n\r\n \r\n    \r\n    //functions\r\n\r\n\r\n    //Done, Confirm, Decline function\r\n    const onIssueStatusChangeFail = (message) => {\r\n        alert(message)\r\n    }\r\n\r\n    const onIssueStatusChangeSuccess = (issueJSON) => {\r\n         //update status of current GUI list\r\n         for (var index in m_issuesList)\r\n         {\r\n             if(m_issuesList[index].id === issueJSON.issueID)\r\n             {\r\n                 m_issuesList[index].status = issueJSON.finalStatus\r\n                 var issue = m_issuesList[index]\r\n                 m_issuesList.splice(index, 1);\r\n                 let newList = [... m_issuesList, issue]\r\n                 setIssuesList(newList)\r\n                 break\r\n             }\r\n         }\r\n    }\r\n\r\n    const changeIssueStatus = (issueID, newStatus, assignedBy) =>{\r\n        var finalStatus\r\n        if(newStatus === \"waiting\" && userName === assignedBy)\r\n        {\r\n             finalStatus = \"completed\"  \r\n        }\r\n        else\r\n        {\r\n            finalStatus = newStatus\r\n        }\r\n\r\n        sc.updateIssueStatus(projectJson._id, issueID, finalStatus , onIssueStatusChangeSuccess, onIssueStatusChangeFail)\r\n\r\n       \r\n    }\r\n\r\n\r\n\r\n\r\n    //Add member functions\r\n    const successAddMemberToDB = (userName, premission, message) => {\r\n        \r\n        if(premission === \"Admin\")\r\n        {\r\n            const newList = [...m_adminList, userName];\r\n            setAdminList(newList);\r\n        }\r\n        else\r\n        {\r\n            const newList = [...m_memberList, userName];\r\n            setMemberList(newList);\r\n        }   \r\n        const newList = [... dropDownItems, userName]\r\n        setDropDownItems(newList)\r\n        alert(message)\r\n    }\r\n    \r\n    const failAddMemberToDB = (message) =>{\r\n        alert(message)\r\n    }\r\n    const closeMemberForm = () =>\r\n    {\r\n        setFormValidated(false);\r\n        setPremmisoin(\"Member\")\r\n        setAddMember(false)\r\n    }\r\n    const submitMember = (event) =>{\r\n        event.preventDefault();\r\n        const form = event.currentTarget\r\n        const memberUserName = form.memberUserName.value\r\n\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setFormValidated(true);\r\n        }\r\n   \r\n        else\r\n        {      \r\n            closeMemberForm()\r\n            sc.addMember(memberUserName,projectJson.projectName, newMemberPremission, projectJson._id, successAddMemberToDB, failAddMemberToDB)\r\n           \r\n\r\n        }\r\n        \r\n\r\n    }\r\n    //Add issue functions\r\n    const successAddIssue = (issueJSON) => {\r\n        setCurrentIssueID(m_currentIssueID + 1)\r\n        let newList = [... m_issuesList, issueJSON]\r\n        setIssuesList(newList)\r\n    }\r\n    \r\n    const failedAddIssue = (message) =>{\r\n        alert(message)\r\n    }\r\n\r\n    const closeIssueForm = () => \r\n    {\r\n        setFormValidated(false);\r\n        setIssueDateValid(false)\r\n        setIssueDateInValid(false)\r\n        setAddIssue(false)\r\n    }\r\n\r\n    const submitIssue = (event) =>{\r\n        event.preventDefault();\r\n        const form = event.currentTarget\r\n        const issueDesc = form.IssueDesc.value\r\n        const selectedMember = form.selectedMember.value\r\n        const date = form.date.value\r\n        \r\n        \r\n        var isValidFlg = true\r\n\r\n        if (form.checkValidity() === false ) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setFormValidated(true);\r\n            isValidFlg = false\r\n\r\n        }\r\n                    \r\n\r\n        if(isValidFlg)\r\n        {     \r\n            closeIssueForm()\r\n            sc.addIssue(projectJson._id,m_currentIssueID,issueDesc, date, userName, selectedMember,\"active\" , successAddIssue, failedAddIssue)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    //classes for tabs view\r\n    const Issues = (issues) => {\r\n        const IssuesRow = ({id, desc, dueData, assignedBy,assignedTo, status}) => {\r\n            let button = null\r\n            if((status===\"active\"))\r\n            {\r\n                if (((assignedBy===userName) && (assignedTo!==userName)))\r\n                {\r\n                   button =  <Button variant=\"secondary\" disabled>On Work</Button>\r\n                }\r\n                else \r\n                {\r\n                    button =  <Button variant=\"outline-primary\" onClick = {() => {changeIssueStatus(id,\"waiting\",assignedBy)}}>Submit</Button>\r\n                }\r\n            } \r\n            else if(status === \"waiting\")\r\n            {\r\n                button =  <Button variant=\"secondary\" disabled>Waiting</Button>\r\n            }\r\n\r\n\r\n            return (    \r\n                    <tr key={id}>\r\n                        <td>{id}</td>\r\n                        <td>{desc}</td>\r\n                        <td>{dueData}</td>\r\n                        <td>{assignedBy}</td>\r\n                        <td>{assignedTo}</td>\r\n                        <td>\r\n                            {button}\r\n                        </td>\r\n                    </tr>\r\n            )}\r\n        return (    \r\n            <div >\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>ID</th>\r\n                        <th>Description</th>\r\n                        <th>Due Date</th>\r\n                        <th>Assigned By</th>\r\n                        <th>Assigned To</th>\r\n                        <th>        </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {m_issuesList.map(({ id,desc, date, assignedBy,assignedTo, status}) => (\r\n                        ((Date.parse(date) >= currentDate) && (status===\"active\" || status ===\"waiting\") && ((assignedBy===userName) || (assignedTo===userName)) )?\r\n                            <IssuesRow  key = {\"issue\" + id} id = {id} desc = {desc} dueData = {date} assignedBy={assignedBy} assignedTo = {assignedTo} status={status}></IssuesRow>\r\n                        :\r\n                            null\r\n                    ))}\r\n                    \r\n                    </tbody>\r\n                    </Table>\r\n            </div>\r\n            \r\n            \r\n    \r\n        )}\r\n       \r\n\r\n    const Completed = () => {\r\n        const CompletedRow = ({id, desc, dueData, assignedBy,assignedTo, status}) => {\r\n            return (    \r\n                    <tr key={id}>\r\n                        <td>{id}</td>\r\n                        <td>{desc}</td>\r\n                        <td>{dueData}</td>\r\n                        <td>{assignedBy}</td>\r\n                        <td>{assignedTo}</td>\r\n                    </tr>\r\n            )}\r\n        return (    \r\n            <div >\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>ID</th>\r\n                        <th>Description</th>\r\n                        <th>Due Date</th>\r\n                        <th>Assigned By</th>\r\n                        <th>Assigned To</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {m_issuesList.map(({ id,desc, date, assignedBy,assignedTo, status}) => (\r\n                        (((assignedBy===userName) || (assignedTo===userName)) && (status===\"completed\" )) ?<CompletedRow  key = {\"comp\" + id} id = {id} desc = {desc} dueData = {date} assignedBy={assignedBy} assignedTo = {assignedTo} status={status}></CompletedRow>: null\r\n                    ))}\r\n                    \r\n                    </tbody>\r\n                    </Table>\r\n            </div>\r\n            \r\n            \r\n    \r\n        )}\r\n    const Overdue = () => {\r\n        const OverdueRow = ({id, desc, dueData, assignedBy,assignedTo, status}) => {\r\n            let button = null\r\n\r\n            if ((assignedBy===userName) && (assignedTo!==userName))\r\n            {\r\n                button =  <Button variant=\"outline-danger\" disabled>Late!</Button>\r\n            }\r\n            else if(status===\"active\")\r\n            {\r\n                button =  <Button variant=\"outline-primary\" onClick = {() => {changeIssueStatus(id,\"waiting\",assignedBy)}}>Submit</Button>\r\n            }else if(status===\"waiting\")\r\n            {\r\n                button =  <Button variant=\"outline-secondary\" disabled>Waiting</Button>\r\n            }\r\n\r\n            return (    \r\n                    <tr key={id}>\r\n                        <td>{id}</td>\r\n                        <td>{desc}</td>\r\n                        <td>{dueData}</td>\r\n                        <td>{assignedBy}</td>\r\n                        <td>{assignedTo}</td>\r\n                        <td>{button}</td>\r\n                        \r\n                    </tr>\r\n            )}\r\n        return (    \r\n            <div >\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>ID</th>\r\n                        <th>Description</th>\r\n                        <th>Due Date</th>\r\n                        <th>Assigned By</th>\r\n                        <th>Assigned To</th>\r\n                        <th>        </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {m_issuesList.map(({ id,desc, date, assignedBy,assignedTo, status}) => (\r\n                        ((Date.parse(date)  < currentDate) && ((assignedBy===userName) || (assignedTo===userName)) && (status === \"waiting\" || status === \"active\")) ?\r\n                            <OverdueRow key = {\"overdue\" + id} id = {id} desc = {desc} dueData = {date} assignedBy={assignedBy} assignedTo = {assignedTo} status={status}></OverdueRow>\r\n                        : \r\n                            null\r\n                    ))}\r\n                    \r\n                    </tbody>\r\n                    </Table>\r\n            </div>\r\n            \r\n            \r\n    \r\n        )}\r\n\r\n    const Members = () => {\r\n        const MembersRow = ({name, premission}) => {\r\n            let button\r\n            if (premission === \"Admin\"  ) {\r\n                button =  <Button variant=\"primary\" disabled>Admin</Button>\r\n            } else {\r\n                button =  <Button variant=\"secondary\" disabled>Member</Button>\r\n            }\r\n\r\n            return (    \r\n                    <tr>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                            {button}\r\n                        </td>\r\n                    </tr>\r\n            )}\r\n        return (    \r\n            <div >\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>User Name</th>\r\n                        <th>Premission</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {m_adminList.map((name) => (\r\n                        <MembersRow  key = {\"mem\" + name} name = {name} premission = \"Admin\"></MembersRow>\r\n                    ))}\r\n                    {m_memberList.map((name) => (\r\n                        <MembersRow  key = {\"mem\" + name} name = {name} premission = \"Member\"></MembersRow>\r\n                    ))}\r\n                    \r\n                    </tbody>\r\n                    </Table>\r\n            </div>\r\n    )}\r\n\r\n    const Waiting = () => {\r\n        const WaitingRow = ({id, desc, dueData, assignedBy,assignedTo, status}) => {\r\n            return (    \r\n                    <tr key={id}>\r\n                        <td>{id}</td>\r\n                        <td>{desc}</td>\r\n                        <td>{dueData}</td>\r\n                        <td>{assignedBy}</td>\r\n                        <td>\r\n                            <Button variant=\"primary\" onClick = {() => {changeIssueStatus(id,\"completed\",assignedBy)}}>Confirm</Button>\r\n                            <Button variant=\"danger\" onClick = {() => {changeIssueStatus(id,\"active\",assignedBy)}}>Decline</Button>\r\n                        </td>\r\n\r\n                        \r\n                    </tr>\r\n            )}\r\n        return (    \r\n            <div >\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                        <th>ID</th>\r\n                        <th>Description</th>\r\n                        <th>Due Date</th>\r\n                        <th>Assigned By</th>\r\n                        <th>        </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {m_issuesList.map(({ id,desc, date, assignedBy,assignedTo, status}) => (\r\n                        (((assignedBy===userName)) && (status===\"waiting\" )) ?<WaitingRow  key = {\"wait\" + id} id = {id} desc = {desc} dueData = {date} assignedBy={assignedBy} assignedTo = {assignedTo} status={status}></WaitingRow>: null\r\n                    ))}\r\n                \r\n                    </tbody>\r\n                    </Table>\r\n\r\n\r\n            </div>\r\n            \r\n            \r\n            \r\n            \r\n    \r\n        )}\r\n\r\n    //render ProjectWindow\r\n    return (  \r\n\r\n        <div className='center'>\r\n        <div>\r\n        <div  className=\"labelStyle\">Projcet: {projectJson.projectName} </div>\r\n        </div>\r\n        <div>\r\n            <div>\r\n                <Toast show={m_showPendingToast} onClose={() => setShowPendingToast(false)}  delay={10000} autohide>\r\n                        <Toast.Header>\r\n                            <strong className=\"me-auto\">Pending Requests</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>You have issues which are waiting for confirmation.</Toast.Body>\r\n                </Toast>\r\n                <Toast show={m_showOverdueToast} onClose={() => setShowOverdueToast(false)}  delay={10000} autohide>\r\n                        <Toast.Header>\r\n                            <strong className=\"me-auto\">OverDue Issues</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>You have overdue issues. </Toast.Body>\r\n                </Toast>\r\n            </div>\r\n            <div> \r\n                <br></br>\r\n            </div>\r\n\r\n            \r\n            <Button key = \"btn-issue\" variant=\"outline-success\" onClick={() => setAddIssue(true)} >Add Issue</Button>\r\n            { isAdmin ?  <Button key = \"btn-member\" variant=\"outline-primary\" onClick={() => setAddMember(true)} >Add Member</Button>: null }\r\n   \r\n            <hr></hr>  \r\n        </div>\r\n            <Tabs defaultActiveKey=\"issues\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n            <Tab eventKey=\"issues\" tabClassName=\"profile-issueTab\" title=\"Issues\" >\r\n                <Issues />   \r\n            </Tab>\r\n            <Tab eventKey=\"completed\" tabClassName=\"profile-completeTab\" title=\"Completed\">\r\n                <Completed />      \r\n            </Tab>\r\n            <Tab eventKey=\"overdue\" tabClassName=\"profile-overdueTab\" title=\"Overdue\">\r\n                <Overdue />  \r\n            </Tab>\r\n            <Tab eventKey=\"members\" tabClassName=\"profile-membersTab\" title=\"Members\">\r\n                <Members />  \r\n            </Tab>\r\n            { isAdmin ? <Tab eventKey=\"waiting\" tabClassName=\"profile-waitingTab\"  title=\"Pending\">\r\n                <Waiting />  \r\n            </Tab> : null }\r\n            \r\n\r\n            </Tabs>\r\n             {/* Adding Issue Form*/}\r\n             <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered show={showAddIssue} onHide={closeIssueForm}>\r\n                <Form noValidate validated={formValidated} onSubmit={submitIssue}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Issue</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        {/* Issue */}\r\n                        <Form.Group controlId=\"IssueDesc\">\r\n                            <Form.Label>Issue Description</Form.Label>\r\n                            <Form.Control required as=\"textarea\" rows={3} placeholder=\"Write something...\"/>   \r\n                            <Form.Control.Feedback type=\"valid\"></Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter an issue description.\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                    \r\n                        <Form.Group className=\"mb-3\" controlId=\"selectedMember\">\r\n                        <Form.Label>Assign To:</Form.Label>\r\n                        <Form.Control as=\"select\">\r\n                        {\r\n                            isAdmin? \r\n                            dropDownItems.map((name) => (\r\n                                <option value={name} >{name} </option>\r\n                            ))\r\n                            :   \r\n                            <option value={userName} >{userName} </option>\r\n                            \r\n                        }\r\n                        </Form.Control>\r\n\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"date\">\r\n                        <Form.Label> Due Date:</Form.Label>\r\n                        <Form.Control type=\"date\"  defaultValue= {new Date().toISOString().split('T')[0]}\r\n                        isValid = {issueDateValid}\r\n                        isInvalid = {issueDateInValid}/>\r\n                        <Form.Control.Feedback type=\"valid\"></Form.Control.Feedback>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                        Selected date is not valid.\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n              \r\n                       \r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={closeIssueForm}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\" >\r\n                            Add\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n\r\n\r\n            {/* Adding Member Form*/}\r\n            <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered show={showAddMember} onHide={closeMemberForm}>\r\n                <Form noValidate validated={formValidated} onSubmit={submitMember}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Member</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        \r\n                        <Form.Group controlId=\"memberUserName\">\r\n                            <Form.Label>User Name</Form.Label>\r\n                            <Form.Control required type=\"text\" placeholder={\"Insert Name\"} />\r\n                            <Form.Control.Feedback type=\"valid\"></Form.Control.Feedback>\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                            Please enter a user name.\r\n                            </Form.Control.Feedback>\r\n\r\n                            <Form.Label>Choose Premissions</Form.Label>\r\n                        </Form.Group>\r\n                        <Dropdown>\r\n\r\n                        <Dropdown.Toggle variant=\"outline-secondary\" id=\"dropdown-basic\">\r\n                        {newMemberPremission}\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"#/action-1\" onClick = {() => setPremmisoin(\"Member\")}>Member</Dropdown.Item>\r\n                            <Dropdown.Item href=\"#/action-2\" onClick = {() => setPremmisoin(\"Admin\")}>Admin</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                        </Dropdown>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={closeMemberForm}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\" >\r\n                            Add\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            \r\n      \r\n         \r\n  \r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProjectWindow","C:\\Users\\Elroye\\Documents\\WebProjectClient\\src\\services\\serverCom.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":5,"column":5,"nodeType":"99","messageId":"100","endLine":5,"endColumn":12},{"ruleId":"97","severity":1,"message":"101","line":16,"column":24,"nodeType":"99","messageId":"100","endLine":16,"endColumn":35},{"ruleId":"97","severity":1,"message":"102","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":20},{"ruleId":"103","severity":1,"message":"104","line":58,"column":14,"nodeType":"99","messageId":"105","endLine":58,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":68,"column":14,"nodeType":"99","messageId":"105","endLine":68,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":73,"column":14,"nodeType":"99","messageId":"105","endLine":73,"endColumn":19},{"ruleId":"97","severity":1,"message":"106","line":80,"column":21,"nodeType":"99","messageId":"100","endLine":80,"endColumn":31},{"ruleId":"107","severity":1,"message":"108","line":103,"column":36,"nodeType":"109","messageId":"110","endLine":103,"endColumn":37,"fix":"111"},{"ruleId":"107","severity":1,"message":"108","line":142,"column":29,"nodeType":"109","messageId":"110","endLine":142,"endColumn":30,"fix":"112"},{"ruleId":"107","severity":1,"message":"108","line":181,"column":27,"nodeType":"109","messageId":"110","endLine":181,"endColumn":28,"fix":"113"},{"ruleId":"97","severity":1,"message":"98","line":5,"column":5,"nodeType":"99","messageId":"100","endLine":5,"endColumn":12},{"ruleId":"97","severity":1,"message":"101","line":16,"column":24,"nodeType":"99","messageId":"100","endLine":16,"endColumn":35},{"ruleId":"97","severity":1,"message":"102","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":20},{"ruleId":"103","severity":1,"message":"104","line":58,"column":14,"nodeType":"99","messageId":"105","endLine":58,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":68,"column":14,"nodeType":"99","messageId":"105","endLine":68,"endColumn":19},{"ruleId":"103","severity":1,"message":"104","line":73,"column":14,"nodeType":"99","messageId":"105","endLine":73,"endColumn":19},{"ruleId":"97","severity":1,"message":"106","line":80,"column":21,"nodeType":"99","messageId":"100","endLine":80,"endColumn":31},{"ruleId":"107","severity":1,"message":"108","line":103,"column":36,"nodeType":"109","messageId":"110","endLine":103,"endColumn":37,"fix":"114"},{"ruleId":"107","severity":1,"message":"108","line":142,"column":29,"nodeType":"109","messageId":"110","endLine":142,"endColumn":30,"fix":"115"},{"ruleId":"107","severity":1,"message":"108","line":181,"column":27,"nodeType":"109","messageId":"110","endLine":181,"endColumn":28,"fix":"116"},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'setUserName' is assigned a value but never used.","'useHistory' is defined but never used.","no-redeclare","'index' is already defined.","redeclared","'setIsAdmin' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"119","text":"120"},{"range":"121","text":"120"},{"range":"122","text":"120"},{"range":"123","text":"120"},{"range":"124","text":"120"},{"range":"125","text":"120"},"no-global-assign","no-unsafe-negation",[3146,3147],"",[4138,4139],[5208,5209],[3146,3147],[4138,4139],[5208,5209]]