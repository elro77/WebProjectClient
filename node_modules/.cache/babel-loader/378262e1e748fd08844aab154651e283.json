{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web_Project\\\\client\\\\src\\\\components\\\\Todo.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { Card, Form, Button, Container, Row, Col, Badge, Alert, Tab, ListGroup, Accordion, Modal } from 'react-bootstrap';\nimport React, { useState, useEffect } from 'react';\nimport { update, data } from '../services/serverCom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ListsComponent = ({\n  InputLists,\n  size,\n  setList,\n  setInputLists\n}) => {\n  const addList = text => {\n    const newList = [...InputLists, {\n      name: text,\n      tasks: []\n    }];\n    setInputLists(newList);\n  };\n\n  if (InputLists == null) InputLists = [];\n  if (!Array.isArray(InputLists)) InputLists = [];\n  return /*#__PURE__*/_jsxDEV(Col, {\n    sm: size,\n    children: /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: [/*#__PURE__*/_jsxDEV(TaskAdder, {\n        addTask: addList,\n        size: \"sm\",\n        name: \"list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), InputLists.map((list, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        onClick: () => setList(list),\n        action: true,\n        href: `#${list.name}_${index}`,\n        children: [\" \", `${list.name}`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 50\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ListsComponent;\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst SubTask = ({\n  subTask,\n  removeSubTask,\n  index\n}) => {\n  _s();\n\n  const [isDone, setIsDone] = useState(SubTask.isDone);\n\n  function markTask() {\n    subTask.isDone = !subTask.isDone;\n    setIsDone(subTask.isDone);\n  }\n\n  ;\n  useEffect(() => {\n    setIsDone(subTask.isDone);\n\n    _updateData();\n  }, [isDone]);\n  useEffect(() => {\n    setIsDone(subTask.isDone);\n  }, [subTask]);\n  if (subTask == null) return null;else return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        textDecoration: subTask.isDone ? \"line-through\" : \"\"\n      },\n      children: subTask.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-danger\",\n        size: \"sm\",\n        className: \"float-right\",\n        onClick: () => removeSubTask(index),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: subTask.isDone ? \"success\" : \"outline-success \",\n        size: \"sm\",\n        className: \"float-right\",\n        onClick: () => markTask(),\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 13\n  }, this);\n};\n\n_s(SubTask, \"rAoDkXP04hvqpQ4gNFHeIZPzs1I=\");\n\n_c2 = SubTask;\n\nlet _setTaskName;\n\nconst Task = ({\n  myTask,\n  removeTask,\n  index\n}) => {\n  _s2();\n\n  const [isDone, setIsDone] = useState(myTask.isDone);\n  const [subTasks, setSubTasks] = useState(myTask.subTasks);\n  const [taskName, setTaskName] = useState(myTask.text);\n\n  const addsSubTask = text => {\n    const newSubtasks = [...myTask.subTasks, {\n      isDone: false,\n      text: text\n    }];\n    myTask.subTasks = newSubtasks;\n    setSubTasks(myTask.subTasks);\n  };\n\n  const removeSubTask = subIndex => {\n    const newTask = [...myTask.subTasks];\n    newTask.splice(subIndex, 1);\n    myTask.subTasks = newTask;\n    setSubTasks(myTask.subTasks);\n  };\n\n  function markTask() {\n    myTask.isDone = !myTask.isDone;\n    setIsDone(myTask.isDone);\n  }\n\n  ;\n\n  function showDetails() {\n    _setTaskName = setTaskName;\n    showTaskDetails();\n\n    _setSelectedTask(myTask);\n  }\n\n  useEffect(() => {\n    _updateData();\n\n    setIsDone(myTask.isDone);\n  }, [subTasks, isDone]);\n  useEffect(() => {\n    setTaskName(myTask.text);\n    setIsDone(myTask.isDone);\n  }, [myTask.text]);\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    defaultActiveKey: \"0\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Card.Title, {\n            className: \"float-left\",\n            style: {\n              textDecoration: myTask.isDone ? \"line-through\" : \"\"\n            },\n            children: taskName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-danger\",\n            size: \"sm\",\n            className: \"float-right\",\n            onClick: () => removeTask(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: myTask.isDone ? \"success\" : \"outline-success \",\n            size: \"sm\",\n            className: \"float-right\",\n            onClick: () => markTask(),\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-info\",\n            size: \"sm\",\n            className: \"float-left\",\n            onClick: () => showDetails(),\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Task, \"VMKLcWEVa6tB7NFsOrtdJKKm9SE=\");\n\n_c3 = Task;\n\nconst TaskAdder = ({\n  addTask,\n  size,\n  name\n}) => {\n  _s3();\n\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!value) return;\n    addTask(value);\n    setValue(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        className: \"input\",\n        value: value,\n        onChange: e => setValue(e.target.value),\n        placeholder: `Add new ${name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"Add\",\n        className: \"float\",\n        size: size,\n        block: true,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: `${capitalizeFirstLetter(name)}s:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 9\n  }, this);\n};\n\n_s3(TaskAdder, \"dBtK6I2q1m3rcfzPBa0nrbv/iCI=\");\n\n_c4 = TaskAdder;\n\nconst ListDetails = ({\n  list,\n  size\n}) => {\n  _s4();\n\n  const [tasks, setTasks] = useState(list.tasks);\n\n  const addTask = text => {\n    const newTasks = [...list.tasks, {\n      isDone: false,\n      text: text,\n      subTasks: []\n    }];\n    setTasks(newTasks);\n    list.tasks = newTasks;\n  };\n\n  const removeTask = index => {\n    const newTask = [...list.tasks];\n    newTask.splice(index, 1);\n    setTasks(newTask);\n    list.tasks = newTask;\n  };\n\n  useEffect(() => {\n    _updateData();\n  }, [tasks]);\n  if (list == undefined || list == null) return null;\n  return /*#__PURE__*/_jsxDEV(Col, {\n    sm: size,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: list.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TaskAdder, {\n        addTask: addTask,\n        size: \"lg\",\n        name: \"task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: list.tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Task, {\n              index: index,\n              myTask: task,\n              removeTask: removeTask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n};\n\n_s4(ListDetails, \"URLI4XRoCKNKx9J7TD+7LjawUDU=\");\n\n_c5 = ListDetails;\nlet showTaskDetails;\n\nconst TaskForm = () => {};\n\n_c6 = TaskForm;\nlet _setSelectedTask = null;\nlet _selectedTask = null;\n\nlet _updateData;\n\nexport let global_setData;\nlet counter = 0;\nlet maxCounter = 0;\n\nconst ToDoContainer = () => {\n  _s5();\n\n  const [localData, setData] = useState(data);\n  const [InputLists, setInputLists] = useState(JSON.parse(localData.lists));\n  global_setData = setData;\n\n  function updateData() {\n    counter++;\n    const myCounter = counter;\n    if (myCounter == 1) maxCounter = 1;\n    if (maxCounter < myCounter) maxCounter = myCounter;\n    setTimeout(() => {\n      debugger;\n\n      if (myCounter < maxCounter) {\n        counter--;\n        return;\n      }\n\n      data.lists = JSON.stringify(InputLists);\n      update({\n        username: localData.username,\n        password: localData.password,\n        lists: InputLists\n      }, () => {}, () => {});\n      counter--;\n    }, 3000);\n  }\n\n  _updateData = updateData;\n  useEffect(() => {\n    if (localData == null || localData == undefined) {\n      setData({\n        username: \"\",\n        password: \"\",\n        lists: \"[]\"\n      });\n      setInputLists(JSON.parse(localData.lists));\n      return;\n    }\n\n    setInputLists(JSON.parse(localData.lists));\n  }, [localData]);\n  useEffect(() => {\n    if (localData.username == \"\" || localData == undefined) {\n      return;\n    }\n\n    if (typeof InputLists != \"string\") {\n      updateData();\n      return;\n    }\n  }, [InputLists]);\n  const [list, setList] = useState(InputLists[0]); //JSON.parse(JSON.stringify(List))\n  //InputLists=[List1,List2]\n\n  function testList(list) {\n    if (list != null) return /*#__PURE__*/_jsxDEV(ListDetails, {\n      list: list,\n      setList: setList,\n      size: 7\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 34\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Tab.Container, {\n    id: \"list-group-tabs-example\",\n    defaultActiveKey: \"#link1\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        marginLeft: 15,\n        marginRight: 15\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListsComponent, {\n        setInputLists: setInputLists,\n        InputLists: InputLists,\n        size: 4,\n        setList: setList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), testList(list), /*#__PURE__*/_jsxDEV(TaskDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 9\n  }, this);\n};\n\n_s5(ToDoContainer, \"2CiWvgPhBpkYEkFBx+BI3l9WyVg=\");\n\n_c7 = ToDoContainer;\n\nconst TaskDetails = () => {\n  _s6();\n\n  const EmptyTask = {\n    text: \"\",\n    desc: \"\",\n    date: \"1111-11-11\"\n  };\n  const [selectedTask, setSelectedTask] = useState(EmptyTask);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  showTaskDetails = handleShow;\n  _setSelectedTask = setSelectedTask;\n  _selectedTask = selectedTask;\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const title = form.task.value;\n    const desc = form.taskdesc.value;\n    const date = form.date.value;\n    selectedTask.text = title;\n    selectedTask.desc = desc;\n    selectedTask.date = date;\n\n    _setTaskName(title);\n\n    _updateData();\n\n    setShow(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Task Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"task\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              defaultValue: selectedTask.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"taskdesc\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              defaultValue: selectedTask.desc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"date\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Due Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"date\",\n              defaultValue: selectedTask.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s6(TaskDetails, \"2+yAHG3gPJO6sAAHQ1f9t6VzRig=\");\n\n_c8 = TaskDetails;\nexport default ToDoContainer;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"ListsComponent\");\n$RefreshReg$(_c2, \"SubTask\");\n$RefreshReg$(_c3, \"Task\");\n$RefreshReg$(_c4, \"TaskAdder\");\n$RefreshReg$(_c5, \"ListDetails\");\n$RefreshReg$(_c6, \"TaskForm\");\n$RefreshReg$(_c7, \"ToDoContainer\");\n$RefreshReg$(_c8, \"TaskDetails\");","map":{"version":3,"sources":["C:/Web_Project/client/src/components/Todo.js"],"names":["Card","Form","Button","Container","Row","Col","Badge","Alert","Tab","ListGroup","Accordion","Modal","React","useState","useEffect","update","data","ListsComponent","InputLists","size","setList","setInputLists","addList","text","newList","name","tasks","Array","isArray","map","list","index","capitalizeFirstLetter","string","charAt","toUpperCase","slice","SubTask","subTask","removeSubTask","isDone","setIsDone","markTask","_updateData","textDecoration","_setTaskName","Task","myTask","removeTask","subTasks","setSubTasks","taskName","setTaskName","addsSubTask","newSubtasks","subIndex","newTask","splice","showDetails","showTaskDetails","_setSelectedTask","TaskAdder","addTask","value","setValue","handleSubmit","event","preventDefault","e","target","ListDetails","setTasks","newTasks","undefined","task","TaskForm","_selectedTask","global_setData","counter","maxCounter","ToDoContainer","localData","setData","JSON","parse","lists","updateData","myCounter","setTimeout","stringify","username","password","testList","marginLeft","marginRight","TaskDetails","EmptyTask","desc","date","selectedTask","setSelectedTask","show","setShow","handleClose","handleShow","onSubmit","form","currentTarget","title","taskdesc"],"mappings":"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","sourcesContent":["import { Card, Form, Button, Container, Row, Col, Badge, Alert, Tab, ListGroup, Accordion, Modal } from 'react-bootstrap'\r\nimport React, { useState, useEffect } from 'react';\r\nimport { update, data } from '../services/serverCom'\r\n\r\nconst ListsComponent = ({ InputLists, size, setList, setInputLists }) => {\r\n    const addList = text => {\r\n        const newList = [...InputLists, { name: text, tasks: [] }];\r\n        setInputLists(newList);\r\n    };\r\n    if (InputLists == null) InputLists = []\r\n    if (!Array.isArray(InputLists)) InputLists = []\r\n    return (\r\n        <Col sm={size}>\r\n            <ListGroup>\r\n                <TaskAdder addTask={addList} size={\"sm\"} name={\"list\"} />\r\n                {InputLists.map((list, index) => <ListGroup.Item onClick={() => setList(list)} action href={`#${list.name}_${index}`}> {`${list.name}`} </ListGroup.Item>)}\r\n\r\n            </ListGroup>\r\n        </Col>\r\n    );\r\n}\r\nfunction capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nconst SubTask = ({ subTask, removeSubTask, index }) => {\r\n    const [isDone, setIsDone] = useState(SubTask.isDone)\r\n    function markTask() {\r\n        subTask.isDone = !subTask.isDone\r\n        setIsDone(subTask.isDone)\r\n\r\n    };\r\n    useEffect(() => {\r\n        setIsDone(subTask.isDone)\r\n        _updateData()\r\n\r\n    }, [isDone])\r\n    useEffect(() => {\r\n        setIsDone(subTask.isDone)\r\n\r\n    }, [subTask])\r\n    if (subTask == null) return null;\r\n    else\r\n        return (\r\n            <div>\r\n                <span style={{ textDecoration: subTask.isDone ? \"line-through\" : \"\" }}>{subTask.text}</span>\r\n                <div>\r\n                    <Button variant=\"outline-danger\" size=\"sm\" className=\"float-right\" onClick={() => removeSubTask(index)}>Remove</Button>\r\n                    <Button variant={subTask.isDone ? \"success\" : \"outline-success \"} size=\"sm\" className=\"float-right\" onClick={() => markTask()}>Done</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\nlet _setTaskName\r\nconst Task = ({ myTask, removeTask, index }) => {\r\n    const [isDone, setIsDone] = useState(myTask.isDone)\r\n    const [subTasks, setSubTasks] = useState(myTask.subTasks)\r\n    const [taskName, setTaskName] = useState(myTask.text)\r\n    const addsSubTask = text => {\r\n        const newSubtasks = [...(myTask.subTasks), { isDone: false, text: text }]\r\n        myTask.subTasks = newSubtasks\r\n        setSubTasks(myTask.subTasks)\r\n    }\r\n    const removeSubTask = subIndex => {\r\n\r\n        const newTask = [...(myTask.subTasks)]\r\n        newTask.splice(subIndex, 1);\r\n        myTask.subTasks = newTask;\r\n        setSubTasks(myTask.subTasks)\r\n\r\n    }\r\n    function markTask() {\r\n        myTask.isDone = !myTask.isDone\r\n        setIsDone(myTask.isDone)\r\n\r\n    };\r\n    function showDetails() {\r\n        _setTaskName = setTaskName\r\n        showTaskDetails();\r\n        _setSelectedTask(myTask)\r\n\r\n    }\r\n    useEffect(() => {\r\n        _updateData()\r\n        setIsDone(myTask.isDone)\r\n    }, [subTasks, isDone])\r\n    useEffect(() => {\r\n        setTaskName(myTask.text)\r\n        setIsDone(myTask.isDone)\r\n    }, [myTask.text])\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n\r\n            <Card>\r\n                <Card.Header>\r\n                    {/* <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" >\r\n                        <div >\r\n                            <div>\r\n                                <span className=\"float-left\" style={{ textDecoration: myTask.isDone ? \"line-through\" : \"\" }}>{taskName}</span>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </Accordion.Toggle> */}\r\n                    <div>\r\n                        <Card.Title className=\"float-left\" style={{ textDecoration: myTask.isDone ? \"line-through\" : \"\" }}>{taskName}</Card.Title>\r\n                    </div>\r\n                    \r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <div>\r\n                        <Button variant=\"outline-danger\" size=\"sm\" className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n                        <Button variant={myTask.isDone ? \"success\" : \"outline-success \"} size=\"sm\" className=\"float-right\" onClick={() => markTask()}>Done</Button>\r\n                        <Button variant=\"outline-info\" size=\"sm\" className=\"float-left\" onClick={() => showDetails()}>Details</Button>\r\n\r\n                    </div>\r\n                </Card.Body>\r\n                {/* <Accordion.Collapse eventKey=\"1\">\r\n                    <Card.Body>\r\n\r\n                        <TaskAdder addTask={addsSubTask} size={\"sm\"} name={\"sub task\"} />\r\n                        {(myTask.subTasks).map((subTask, index) => {\r\n                            return (\r\n                                <Card>\r\n                                    <SubTask\r\n                                        index={index}\r\n                                        subTask={subTask}\r\n                                        removeSubTask={removeSubTask} />\r\n                                </Card>\r\n                            )\r\n                        }\r\n                        )}\r\n\r\n                    </Card.Body>\r\n                </Accordion.Collapse> */}\r\n            </Card>\r\n        </Accordion>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst TaskAdder = ({ addTask, size, name }) => {\r\n    const [value, setValue] = useState(\"\");\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        if (!value) return;\r\n        addTask(value);\r\n        setValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit} >\r\n            <Form.Group>\r\n                <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder={`Add new ${name}`} />\r\n            </Form.Group >\r\n            <Form.Group >\r\n                <Button variant=\"primary\" type=\"Add\" className=\"float\" size={size} block>\r\n                    Add\r\n                </Button>\r\n            </Form.Group >\r\n            <Form.Group>\r\n                <Form.Label>\r\n                    <b>{`${capitalizeFirstLetter(name)}s:`}</b>\r\n                </Form.Label>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}\r\n\r\nconst ListDetails = ({ list, size }) => {\r\n\r\n    const [tasks, setTasks] = useState(list.tasks);\r\n\r\n    const addTask = text => {\r\n        const newTasks = [...list.tasks, { isDone: false, text: text, subTasks: [] }];\r\n        setTasks(newTasks);\r\n        list.tasks = newTasks\r\n    };\r\n    const removeTask = index => {\r\n        const newTask = [...list.tasks];\r\n        newTask.splice(index, 1);\r\n        setTasks(newTask);\r\n        list.tasks = newTask\r\n    };\r\n    useEffect(() => {\r\n        _updateData()\r\n\r\n    }, [tasks])\r\n    if (list == undefined || list == null) return null\r\n    return (\r\n        <Col sm={size}>\r\n            <div >\r\n                <h1 >{list.name}</h1>\r\n                <TaskAdder addTask={addTask} size={\"lg\"} name={\"task\"} />\r\n                <div>\r\n                    {list.tasks.map((task, index) => (\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Task\r\n                                    index={index}\r\n                                    myTask={task}\r\n                                    removeTask={removeTask}\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </Col>\r\n    );\r\n};\r\n\r\nlet showTaskDetails\r\nconst TaskForm = () => {\r\n}\r\n\r\nlet _setSelectedTask = null\r\nlet _selectedTask = null\r\nlet _updateData\r\nexport let global_setData\r\nlet counter = 0\r\nlet maxCounter = 0\r\nconst ToDoContainer = () => {\r\n\r\n    const [localData, setData] = useState(data)\r\n    const [InputLists, setInputLists] = useState(JSON.parse(localData.lists))\r\n    global_setData = setData\r\n\r\n    function updateData() {\r\n\r\n\r\n        counter++\r\n        const myCounter = counter\r\n        if (myCounter == 1) maxCounter = 1\r\n        if (maxCounter < myCounter)\r\n            maxCounter = myCounter\r\n\r\n        setTimeout(() => {\r\n            debugger\r\n            if (myCounter < maxCounter) {\r\n                counter--\r\n                return\r\n            }\r\n            data.lists = JSON.stringify(InputLists)\r\n            update({ username: localData.username, password: localData.password, lists: InputLists }, () => { }, () => { })\r\n            counter--\r\n        }, 3000)\r\n\r\n    }\r\n    _updateData = updateData\r\n    useEffect(() => {\r\n\r\n        if (localData == null || localData == undefined) {\r\n            setData({ username: \"\", password: \"\", lists: \"[]\" })\r\n            setInputLists(JSON.parse(localData.lists))\r\n            return\r\n        }\r\n\r\n        setInputLists(JSON.parse(localData.lists))\r\n\r\n\r\n    }, [localData]\r\n    )\r\n    useEffect(() => {\r\n        if (localData.username == \"\" || localData == undefined) {\r\n            return\r\n        }\r\n        if (typeof (InputLists) != \"string\") {\r\n            updateData()\r\n            return\r\n        }\r\n\r\n\r\n    }, [InputLists]\r\n    )\r\n    const [list, setList] = useState(InputLists[0]);\r\n\r\n    //JSON.parse(JSON.stringify(List))\r\n    //InputLists=[List1,List2]\r\n\r\n    function testList(list) {\r\n        if (list != null) return <ListDetails list={list} setList={setList} size={7} />\r\n    }\r\n\r\n    return (\r\n        <Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\" >\r\n            <Row style={{ marginLeft: 15, marginRight: 15 }}>\r\n                <ListsComponent setInputLists={setInputLists} InputLists={InputLists} size={4} setList={setList} ></ListsComponent>\r\n\r\n                {testList(list)}\r\n                <TaskDetails />\r\n            </Row>\r\n        </Tab.Container>\r\n\r\n    )\r\n}\r\nconst TaskDetails = () => {\r\n    const EmptyTask = { text: \"\", desc: \"\", date: \"1111-11-11\" }\r\n    const [selectedTask, setSelectedTask] = useState(EmptyTask);\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    showTaskDetails = handleShow\r\n    _setSelectedTask = setSelectedTask\r\n    _selectedTask = selectedTask\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget\r\n        const title = form.task.value\r\n        const desc = form.taskdesc.value\r\n        const date = form.date.value\r\n        selectedTask.text = title\r\n        selectedTask.desc = desc\r\n        selectedTask.date = date\r\n        _setTaskName(title)\r\n        _updateData()\r\n        setShow(false)\r\n\r\n\r\n    }\r\n    return (\r\n\r\n        <>\r\n        {/* Model is pop-up for editing task details */}\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Form onSubmit={onSubmit}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Task Details</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n\r\n                        <Form.Group controlId=\"task\">\r\n                            <Form.Label>Task</Form.Label>\r\n                            <Form.Control type=\"text\" defaultValue={selectedTask.text} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"taskdesc\">\r\n                            <Form.Label>Description</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows={3} defaultValue={selectedTask.desc} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"date\">\r\n                            <Form.Label> Due Date:</Form.Label>\r\n                            <Form.Control type=\"date\" defaultValue={selectedTask.date} />\r\n                        </Form.Group>\r\n\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Save Changes\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Form>\r\n            </Modal>\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default ToDoContainer"]},"metadata":{},"sourceType":"module"}