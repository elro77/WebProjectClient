{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web_Project\\\\client\\\\src\\\\components\\\\Todo.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { Card, Form, Button, Container, Row, Col, Badge, Alert, Tab, ListGroup, Accordion, Modal } from 'react-bootstrap';\nimport React, { useState, useEffect } from 'react';\nimport { update, data } from '../services/serverCom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ListsComponent = ({\n  InputLists,\n  size,\n  setList,\n  setInputLists\n}) => {\n  const addList = text => {\n    const newList = [...InputLists, {\n      name: text,\n      tasks: []\n    }];\n    setInputLists(newList);\n  };\n\n  if (InputLists == null) InputLists = [];\n  if (!Array.isArray(InputLists)) InputLists = [];\n  return /*#__PURE__*/_jsxDEV(Col, {\n    sm: size,\n    children: /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: [/*#__PURE__*/_jsxDEV(TaskAdder, {\n        addTask: addList,\n        size: \"sm\",\n        name: \"list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }, this), InputLists.map((list, index) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        onClick: () => setList(list),\n        action: true,\n        href: `#${list.name}_${index}`,\n        children: [\" \", `${list.name}`, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 41\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 1\n  }, this);\n};\n\n_c = ListsComponent;\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst SubTask = ({\n  subTask,\n  removeSubTask,\n  index\n}) => {\n  _s();\n\n  const [isDone, setIsDone] = useState(SubTask.isDone);\n\n  function markTask() {\n    subTask.isDone = !subTask.isDone;\n    setIsDone(subTask.isDone);\n  }\n\n  ;\n  useEffect(() => {\n    setIsDone(subTask.isDone);\n\n    _updateData();\n  }, [isDone]);\n  useEffect(() => {\n    setIsDone(subTask.isDone);\n  }, [subTask]);\n  if (subTask == null) return null;else return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        textDecoration: subTask.isDone ? \"line-through\" : \"\"\n      },\n      children: subTask.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-danger\",\n        size: \"sm\",\n        className: \"float-right\",\n        onClick: () => removeSubTask(index),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: subTask.isDone ? \"success\" : \"outline-success \",\n        size: \"sm\",\n        className: \"float-right\",\n        onClick: () => markTask(),\n        children: \"Banana\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n};\n\n_s(SubTask, \"jFQlVZQtaZn6s/2WqklAend9dh0=\");\n\n_c2 = SubTask;\n\nlet _setTaskName;\n\nconst Task = ({\n  myTask,\n  removeTask,\n  index\n}) => {\n  _s2();\n\n  const [isDone, setIsDone] = useState(myTask.isDone);\n  const [subTasks, setSubTasks] = useState(myTask.subTasks);\n  const [taskName, setTaskName] = useState(myTask.text);\n\n  const addsSubTask = text => {\n    const newSubtasks = [...myTask.subTasks, {\n      isDone: false,\n      text: text\n    }];\n    myTask.subTasks = newSubtasks;\n    setSubTasks(myTask.subTasks);\n  };\n\n  const removeSubTask = subIndex => {\n    const newTask = [...myTask.subTasks];\n    newTask.splice(subIndex, 1);\n    myTask.subTasks = newTask;\n    setSubTasks(myTask.subTasks);\n  };\n\n  function markTask() {\n    myTask.isDone = !myTask.isDone;\n    setIsDone(myTask.isDone);\n  }\n\n  ;\n\n  function showDetails() {\n    _setTaskName = setTaskName;\n    showTaskDetails();\n\n    _setSelectedTask(myTask);\n  }\n\n  useEffect(() => {\n    _updateData();\n\n    setIsDone(myTask.isDone);\n  }, [subTasks, isDone]);\n  useEffect(() => {\n    setTaskName(myTask.text);\n    setIsDone(myTask.isDone);\n  }, [myTask.text]);\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    defaultActiveKey: \"0\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        children: [/*#__PURE__*/_jsxDEV(Accordion.Toggle, {\n          as: Button,\n          variant: \"link\",\n          eventKey: \"1\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"float-left\",\n                style: {\n                  textDecoration: myTask.isDone ? \"line-through\" : \"\"\n                },\n                children: taskName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-danger\",\n            size: \"sm\",\n            className: \"float-right\",\n            onClick: () => removeTask(index),\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: myTask.isDone ? \"success\" : \"outline-success \",\n            size: \"sm\",\n            className: \"float-right\",\n            onClick: () => markTask(),\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-info\",\n            size: \"sm\",\n            className: \"float-left\",\n            onClick: () => showDetails(),\n            children: \"Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Accordion.Collapse, {\n        eventKey: \"1\",\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(TaskAdder, {\n            addTask: addsSubTask,\n            size: \"sm\",\n            name: \"sub task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), myTask.subTasks.map((subTask, index) => {\n            return /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(SubTask, {\n                index: index,\n                subTask: subTask,\n                removeSubTask: removeSubTask\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 24\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(Task, \"I0EPo2X8ZMoU2cLzk1eeTsM2NF0=\");\n\n_c3 = Task;\n\nconst TaskAdder = ({\n  addTask,\n  size,\n  name\n}) => {\n  _s3();\n\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!value) return;\n    addTask(value);\n    setValue(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        className: \"input\",\n        value: value,\n        onChange: e => setValue(e.target.value),\n        placeholder: `Add new ${name}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"Add\",\n        className: \"float\",\n        size: size,\n        block: true,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      children: /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: `${capitalizeFirstLetter(name)}s:`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 7\n  }, this);\n};\n\n_s3(TaskAdder, \"dBtK6I2q1m3rcfzPBa0nrbv/iCI=\");\n\n_c4 = TaskAdder;\n\nconst ListDetails = ({\n  list,\n  size\n}) => {\n  _s4();\n\n  const [tasks, setTasks] = useState(list.tasks);\n\n  const addTask = text => {\n    const newTasks = [...list.tasks, {\n      isDone: false,\n      text: text,\n      subTasks: []\n    }];\n    setTasks(newTasks);\n    list.tasks = newTasks;\n  };\n\n  const removeTask = index => {\n    const newTask = [...list.tasks];\n    newTask.splice(index, 1);\n    setTasks(newTask);\n    list.tasks = newTask;\n  };\n\n  useEffect(() => {\n    _updateData();\n  }, [tasks]);\n  if (list == undefined || list == null) return null;\n  return /*#__PURE__*/_jsxDEV(Col, {\n    sm: size,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: list.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskAdder, {\n        addTask: addTask,\n        size: \"lg\",\n        name: \"task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: list.tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Task, {\n              index: index,\n              myTask: task,\n              removeTask: removeTask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 7\n  }, this);\n};\n\n_s4(ListDetails, \"URLI4XRoCKNKx9J7TD+7LjawUDU=\");\n\n_c5 = ListDetails;\nlet showTaskDetails;\n\nconst TaskForm = () => {};\n\n_c6 = TaskForm;\nlet _setSelectedTask = null;\nlet _selectedTask = null;\n\nlet _updateData;\n\nexport let global_setData;\nlet counter = 0;\nlet maxCounter = 0;\n\nconst ToDoContainer = () => {\n  _s5();\n\n  const [localData, setData] = useState(data);\n  const [InputLists, setInputLists] = useState(JSON.parse(localData.lists));\n  global_setData = setData;\n\n  function updateData() {\n    counter++;\n    const myCounter = counter;\n    if (myCounter == 1) maxCounter = 1;\n    if (maxCounter < myCounter) maxCounter = myCounter;\n    setTimeout(() => {\n      debugger;\n\n      if (myCounter < maxCounter) {\n        counter--;\n        return;\n      }\n\n      data.lists = JSON.stringify(InputLists);\n      update({\n        username: localData.username,\n        password: localData.password,\n        lists: InputLists\n      }, () => {}, () => {});\n      counter--;\n    }, 3000);\n  }\n\n  _updateData = updateData;\n  useEffect(() => {\n    if (localData == null || localData == undefined) {\n      setData({\n        username: \"\",\n        password: \"\",\n        lists: \"[]\"\n      });\n      setInputLists(JSON.parse(localData.lists));\n      return;\n    }\n\n    setInputLists(JSON.parse(localData.lists));\n  }, [localData]);\n  useEffect(() => {\n    if (localData.username == \"\" || localData == undefined) {\n      return;\n    }\n\n    if (typeof InputLists != \"string\") {\n      updateData();\n      return;\n    }\n  }, [InputLists]);\n  const [list, setList] = useState(InputLists[0]); //JSON.parse(JSON.stringify(List))\n  //InputLists=[List1,List2]\n\n  function testList(list) {\n    if (list != null) return /*#__PURE__*/_jsxDEV(ListDetails, {\n      list: list,\n      setList: setList,\n      size: 7\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 30\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Tab.Container, {\n    id: \"list-group-tabs-example\",\n    defaultActiveKey: \"#link1\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        marginLeft: 15,\n        marginRight: 15\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListsComponent, {\n        setInputLists: setInputLists,\n        InputLists: InputLists,\n        size: 4,\n        setList: setList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 3\n      }, this), testList(list), /*#__PURE__*/_jsxDEV(TaskDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 1\n  }, this);\n};\n\n_s5(ToDoContainer, \"AQbyyR1/Y7pDW39wua6sJbbo1wg=\");\n\n_c7 = ToDoContainer;\n\nconst TaskDetails = () => {\n  _s6();\n\n  const EmptyTask = {\n    text: \"\",\n    desc: \"\",\n    date: \"1111-11-11\"\n  };\n  const [selectedTask, setSelectedTask] = useState(EmptyTask);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  showTaskDetails = handleShow;\n  _setSelectedTask = setSelectedTask;\n  _selectedTask = selectedTask;\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    const title = form.task.value;\n    const desc = form.taskdesc.value;\n    const date = form.date.value;\n    selectedTask.text = title;\n    selectedTask.desc = desc;\n    selectedTask.date = date;\n\n    _setTaskName(title);\n\n    _updateData();\n\n    setShow(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Task Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"task\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              defaultValue: selectedTask.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"taskdesc\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3,\n              defaultValue: selectedTask.desc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"date\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \" Due Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"date\",\n              defaultValue: selectedTask.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: handleClose,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            type: \"submit\",\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s6(TaskDetails, \"2+yAHG3gPJO6sAAHQ1f9t6VzRig=\");\n\n_c8 = TaskDetails;\nexport default ToDoContainer;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"ListsComponent\");\n$RefreshReg$(_c2, \"SubTask\");\n$RefreshReg$(_c3, \"Task\");\n$RefreshReg$(_c4, \"TaskAdder\");\n$RefreshReg$(_c5, \"ListDetails\");\n$RefreshReg$(_c6, \"TaskForm\");\n$RefreshReg$(_c7, \"ToDoContainer\");\n$RefreshReg$(_c8, \"TaskDetails\");","map":{"version":3,"sources":["C:/Web_Project/client/src/components/Todo.js"],"names":["Card","Form","Button","Container","Row","Col","Badge","Alert","Tab","ListGroup","Accordion","Modal","React","useState","useEffect","update","data","ListsComponent","InputLists","size","setList","setInputLists","addList","text","newList","name","tasks","Array","isArray","map","list","index","capitalizeFirstLetter","string","charAt","toUpperCase","slice","SubTask","subTask","removeSubTask","isDone","setIsDone","markTask","_updateData","textDecoration","_setTaskName","Task","myTask","removeTask","subTasks","setSubTasks","taskName","setTaskName","addsSubTask","newSubtasks","subIndex","newTask","splice","showDetails","showTaskDetails","_setSelectedTask","TaskAdder","addTask","value","setValue","handleSubmit","event","preventDefault","e","target","ListDetails","setTasks","newTasks","undefined","task","TaskForm","_selectedTask","global_setData","counter","maxCounter","ToDoContainer","localData","setData","JSON","parse","lists","updateData","myCounter","setTimeout","stringify","username","password","testList","marginLeft","marginRight","TaskDetails","EmptyTask","desc","date","selectedTask","setSelectedTask","show","setShow","handleClose","handleShow","onSubmit","form","currentTarget","title","taskdesc"],"mappings":"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","sourcesContent":["import { Card, Form, Button,Container ,Row,Col,Badge,Alert,Tab,ListGroup,Accordion,Modal} from 'react-bootstrap'\r\nimport React, { useState,useEffect } from 'react';\r\nimport {update,data} from '../services/serverCom'\r\nconst ListsComponent = ({InputLists,size,setList,setInputLists})=>{\r\n  const addList = text => {\r\n    const newList = [...InputLists, {name:text, tasks:[]}];\r\n    setInputLists(newList);\r\n  };\r\n  if (InputLists == null) InputLists=[]\r\n  if (!Array.isArray(InputLists)) InputLists=[]\r\n  return (\r\n<Col sm={size}>\r\n      <ListGroup>\r\n      <TaskAdder addTask={addList}size={\"sm\"} name={\"list\"}/>\r\n        {InputLists.map((list,index) => <ListGroup.Item onClick={()=> setList(list)} action href={`#${list.name}_${index}`}> {`${list.name}`} </ListGroup.Item>)}\r\n        \r\n      </ListGroup>\r\n    </Col>\r\n    );\r\n  }\r\nfunction capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1)\r\n}\r\n\r\nconst SubTask=({ subTask, removeSubTask,index})=> {\r\n  const [isDone,setIsDone]= useState(SubTask.isDone)\r\n  function markTask () {\r\n    subTask.isDone=!subTask.isDone\r\n    setIsDone(subTask.isDone)\r\n    \r\n  };\r\n  useEffect(()=>{\r\n    setIsDone(subTask.isDone)\r\n    _updateData()\r\n\r\n  },[isDone])\r\n  useEffect(()=>{\r\n    setIsDone(subTask.isDone)\r\n\r\n  },[subTask])\r\n  if (subTask==null) return null;\r\n  else\r\n    return (\r\n      <div>\r\n        <span style={{ textDecoration: subTask.isDone ? \"line-through\" : \"\" }}>{subTask.text}</span>\r\n        <div>  \r\n          <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeSubTask(index)}>Remove</Button>\r\n          <Button variant={ subTask.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={() => markTask()}>Banana</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  let _setTaskName\r\nconst Task=({ myTask,removeTask,index})=> {\r\n  const [isDone,setIsDone]= useState(myTask.isDone)\r\n  const [subTasks,setSubTasks]= useState(myTask.subTasks)\r\n  const [taskName,setTaskName] = useState(myTask.text)\r\n    const addsSubTask = text => {\r\n        const newSubtasks = [...(myTask.subTasks), { isDone: false,text:text }]\r\n        myTask.subTasks=newSubtasks\r\n        setSubTasks(myTask.subTasks)\r\n      }\r\n    const removeSubTask = subIndex => {\r\n      \r\n        const newTask = [...(myTask.subTasks)]\r\n        newTask.splice(subIndex, 1);\r\n        myTask.subTasks=newTask;\r\n        setSubTasks(myTask.subTasks)\r\n\r\n      }\r\n      function markTask () {\r\n        myTask.isDone=!myTask.isDone\r\n        setIsDone(myTask.isDone)\r\n        \r\n      };\r\n      function showDetails(){\r\n        _setTaskName=setTaskName\r\n        showTaskDetails();\r\n        _setSelectedTask(myTask)\r\n        \r\n      }\r\n      useEffect(()=>{\r\n        _updateData()\r\n        setIsDone(myTask.isDone)\r\n      },[subTasks,isDone])\r\n      useEffect(()=>{\r\n        setTaskName(myTask.text)\r\n        setIsDone(myTask.isDone)\r\n      },[myTask.text])\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n\r\n        <Card>\r\n          <Card.Header>\r\n            <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\" >\r\n            <div >\r\n                <div>\r\n                    <span  className=\"float-left\" style={{ textDecoration: myTask.isDone ? \"line-through\" : \"\" }}>{taskName}</span>\r\n                    \r\n                </div>\r\n            </div>\r\n            </Accordion.Toggle>\r\n                    <div>  \r\n                    <Button variant=\"outline-danger\" size=\"sm\"  className=\"float-right\" onClick={() => removeTask(index)}>Remove</Button>\r\n                    <Button variant={ myTask.isDone ? \"success\" : \"outline-success \"}  size=\"sm\" className=\"float-right\" onClick={()=>markTask()}>Done</Button>\r\n                    <Button variant=\"outline-info\" size=\"sm\"  className=\"float-left\" onClick={() => showDetails() }>Details</Button>\r\n\r\n                    </div>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n     \r\n            <TaskAdder addTask={addsSubTask}size={\"sm\"} name={\"sub task\"} />\r\n                {(myTask.subTasks).map((subTask,index) => {\r\n                   return(\r\n                       <Card>\r\n                        <SubTask \r\n                        index={index}\r\n                        subTask={subTask}\r\n                        removeSubTask={removeSubTask}/>\r\n                        </Card>\r\n                    )\r\n                    }\r\n                )}\r\n            \r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const TaskAdder=({ addTask,size,name }) =>{\r\n    const [value, setValue] = useState(\"\");\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n      if (!value) return;\r\n      addTask(value);\r\n      setValue(\"\");\r\n    };\r\n  \r\n    return (\r\n      <Form onSubmit={handleSubmit} > \r\n      <Form.Group>\r\n        <Form.Control type=\"text\" className=\"input\" value={value} onChange={e => setValue(e.target.value)} placeholder={`Add new ${name}`} />\r\n      </Form.Group >\r\n      <Form.Group >\r\n        <Button   variant=\"primary\" type=\"Add\"className=\"float\" size={size} block>\r\n            Add\r\n        </Button>\r\n        </Form.Group >\r\n        <Form.Group>\r\n        <Form.Label>\r\n          <b>{`${capitalizeFirstLetter(name)}s:`}</b>\r\n          </Form.Label>\r\n        </Form.Group>\r\n    </Form>\r\n    );\r\n  }\r\n\r\nconst ListDetails =({list,size})=> {\r\n\r\n    const [tasks, setTasks] = useState(list.tasks);\r\n  \r\n      const addTask = text => {\r\n        const newTasks = [...list.tasks, { isDone: false,text:text,subTasks:[] }];\r\n        setTasks(newTasks);\r\n        list.tasks=newTasks\r\n      };\r\n      const removeTask = index => {\r\n        const newTask = [...list.tasks];\r\n        newTask.splice(index, 1);\r\n        setTasks(newTask);\r\n        list.tasks=newTask\r\n      };\r\n      useEffect(()=>{\r\n        _updateData()\r\n\r\n      },[tasks])\r\n      if (list==undefined || list == null) return null\r\n    return (\r\n      <Col sm={size}>\r\n    <div >\r\n        <h1 >{list.name}</h1>\r\n        <TaskAdder addTask={addTask}size={\"lg\"} name={\"task\"} />\r\n        <div>\r\n          {list.tasks.map((task, index) => (\r\n            <Card>\r\n              <Card.Body>\r\n                <Task \r\n                index={index}\r\n                myTask={task}\r\n                removeTask={removeTask}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      </Col>\r\n    );\r\n  };\r\n  \r\nlet showTaskDetails\r\nconst TaskForm= ()=>{\r\n  }\r\n \r\nlet _setSelectedTask=null\r\nlet _selectedTask=null\r\nlet _updateData\r\nexport let global_setData\r\nlet counter=0\r\nlet maxCounter=0\r\nconst ToDoContainer = () => {\r\n  \r\n    const [localData,setData]= useState(data)\r\n    const [InputLists,setInputLists] = useState(JSON.parse(localData.lists))\r\n    global_setData=setData\r\n\r\n    function updateData(){\r\n      \r\n      \r\n      counter++\r\n      const myCounter=counter\r\n      if (myCounter==1) maxCounter=1\r\n      if (maxCounter<myCounter)\r\n      maxCounter=myCounter\r\n     \r\n      setTimeout(() => {\r\n        debugger\r\n        if (myCounter<maxCounter){\r\n          counter--\r\n          return\r\n        } \r\n        data.lists=JSON.stringify(InputLists)\r\n        update({username:localData.username,password:localData.password,lists:InputLists},()=>{},()=>{})\r\n        counter--\r\n      }, 3000)\r\n      \r\n    }\r\n    _updateData=updateData\r\n    useEffect(()=>\r\n      {\r\n        \r\n          if (localData==null || localData== undefined){\r\n            setData({username:\"\",password:\"\",lists:\"[]\"})\r\n            setInputLists(JSON.parse(localData.lists))\r\n            return\r\n          }\r\n          \r\n          setInputLists(JSON.parse(localData.lists))\r\n          \r\n\r\n      },[localData]\r\n    )\r\n    useEffect(()=>\r\n      {\r\n          if (localData.username==\"\" || localData== undefined){\r\n            return\r\n          }\r\n          if (typeof(InputLists)!=\"string\"){\r\n              updateData()\r\n            return\r\n          }\r\n          \r\n\r\n      },[InputLists]\r\n    )\r\n    const [list,setList]= useState(InputLists[0]);\r\n    \r\n  //JSON.parse(JSON.stringify(List))\r\n    //InputLists=[List1,List2]\r\n   \r\n    function testList(list){\r\n      if (list!=null) return <ListDetails  list={list} setList={setList} size={7}/>\r\n    }\r\n    \r\n    return (\r\n<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#link1\" >\r\n  <Row style={{ marginLeft: 15, marginRight: 15 }}>\r\n  <ListsComponent setInputLists={setInputLists} InputLists = {InputLists} size={4} setList={setList} ></ListsComponent> \r\n      \r\n  {testList(list)}\r\n  <TaskDetails/>\r\n  </Row>\r\n</Tab.Container>\r\n      \r\n  )\r\n  }\r\n  const TaskDetails=()=>{     \r\n    const EmptyTask= {text:\"\",desc:\"\",date:\"1111-11-11\"}\r\n    const [selectedTask, setSelectedTask] = useState(EmptyTask);\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    showTaskDetails=handleShow\r\n    _setSelectedTask=setSelectedTask\r\n    _selectedTask=selectedTask\r\n    const onSubmit=(event)=>\r\n    {\r\n      event.preventDefault();\r\n      const form = event.currentTarget\r\n      const title=form.task.value\r\n      const desc=form.taskdesc.value\r\n      const date=form.date.value\r\n      selectedTask.text=title\r\n      selectedTask.desc=desc\r\n      selectedTask.date=date\r\n      _setTaskName(title)\r\n      _updateData()\r\n      setShow(false)\r\n      \r\n\r\n    }\r\n      return (\r\n      \r\n      <>\r\n        <Modal show={show} onHide={handleClose}>\r\n        <Form onSubmit={onSubmit}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Task Details</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n          \r\n      <Form.Group controlId=\"task\">\r\n        <Form.Label>Task</Form.Label>\r\n        <Form.Control type=\"text\" defaultValue={selectedTask.text}/>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"taskdesc\">\r\n        <Form.Label>Description</Form.Label>\r\n        <Form.Control  as=\"textarea\" rows={3} defaultValue={selectedTask.desc} />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"date\">\r\n        <Form.Label> Due Date:</Form.Label>\r\n        <Form.Control type=\"date\"  defaultValue={selectedTask.date} />\r\n      </Form.Group>\r\n      \r\n    \r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n        Save Changes\r\n      </Button>\r\n            \r\n          </Modal.Footer>\r\n          </Form>\r\n        </Modal>\r\n     \r\n      \r\n      \r\n    </>\r\n        )\r\n  }\r\n  export default ToDoContainer"]},"metadata":{},"sourceType":"module"}